{"version":3,"sources":["helpers/happiness.svg","helpers/fear.svg","helpers/anger.svg","helpers/neutral.svg","helpers/sad.svg","helpers/disgusted.svg","helpers/admiration.svg","helpers/expectancy.svg","helpers/settings.js","helpers/surprise-face.svg","components/Layout/logo.png","components/Layout/Layout.js","components/Tweet/Tweet.js","components/Form/Form.js","components/DropZone/DropZone.js","components/Table/Table.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["annotationKey","skippedKey","userKey","Copyright","setShowId","Typography","variant","color","align","Link","href","onClick","style","fontSize","title","useStyles","makeStyles","theme","appBar","position","layout","width","marginLeft","spacing","marginRight","breakpoints","up","logo","paper","marginTop","marginBottom","Layout","children","classes","useState","useCookies","cookies","setCookie","useLocalStorage","storage","setStorage","skipped","setSkipped","annotations","skippedTweets","useEffect","Array","isArray","length","Fragment","CssBaseline","AppBar","className","Toolbar","src","noWrap","Paper","card","backgroundColor","minHeight","tweet","display","flexDirection","justifyContent","alignItems","error","fontWeight","errorMessage","textAlign","info","progress","left","top","Tweet","tweetContent","tweetId","loading","setLoading","SnackbarContent","message","Icon","Card","CardContent","onLoad","options","maxWidth","cards","CircularProgress","buttons","buttonContainer","margin","button","labelIcon","height","zone","flex","padding","borderWidth","borderRadius","borderColor","borderStyle","outline","transition","activeStyle","acceptStyle","rejectStyle","DropZone","onFileChange","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","console","log","onerror","onload","result","JSON","parse","id","filter","item","pos","indexOf","findIndex","el","forEach","file","readAsText","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","paddingLeft","paddingTop","table","maxHeight","body","overflowY","tweetClass","TweetTable","tweets","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","slice","map","row","content","split","status","TablePagination","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","target","value","gutterBottom","createMuiTheme","palette","primary","main","secondary","App","setTweets","CookiesProvider","ThemeProvider","newTweets","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47b07105.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/happiness.4e02f678.svg\";","export default __webpack_public_path__ + \"static/media/fear.2470cbbc.svg\";","export default __webpack_public_path__ + \"static/media/anger.8528d165.svg\";","export default __webpack_public_path__ + \"static/media/neutral.5623396f.svg\";","export default __webpack_public_path__ + \"static/media/sad.2f887896.svg\";","export default __webpack_public_path__ + \"static/media/disgusted.0f4f8fc2.svg\";","export default __webpack_public_path__ + \"static/media/admiration.1c8ea55d.svg\";","export default __webpack_public_path__ + \"static/media/expectancy.7f622444.svg\";","import hapIcon from \"./happiness.svg\";\nimport fearIcon from \"./fear.svg\";\nimport angIcon from \"./anger.svg\";\nimport neutIcon from \"./neutral.svg\";\nimport sadIcon from \"./sad.svg\";\nimport disIcon from \"./disgusted.svg\";\nimport admIcon from \"./admiration.svg\";\nimport expIcon from \"./expectancy.svg\";\nimport surpIcon from \"./surprise-face.svg\";\n\nexport const labels = [\n  {\n    id: \"radosc\",\n    label: \"Radość\",\n    icon: hapIcon,\n  },\n  {\n    id: \"smutek\",\n    label: \"Smutek\",\n    icon: sadIcon,\n  },\n  {\n    id: \"guilt\",\n    label: \"Podziw\",\n    icon: admIcon,\n  },\n  {\n    id: \"wstret\",\n    label: \"Wstręt\",\n    icon: disIcon,\n  },\n  {\n    id: \"zlosc\",\n    label: \"Złość\",\n    icon: angIcon,\n  },\n  {\n    id: \"strach\",\n    label: \"Strach\",\n    icon: fearIcon,\n  },\n  {\n    id: \"zaskoczenie\",\n    label: \"Zaskoczenie\",\n    icon: surpIcon,\n  },\n  {\n    id: \"oczekiwanie\",\n    label: \"Oczekiwanie\",\n    icon: expIcon,\n  },\n  {\n    id: \"neutralne\",\n    label: \"Neutralne\",\n    icon: neutIcon,\n  },\n];\nexport const annotationKey = \"annotated\";\nexport const skippedKey = \"skipped\";\nexport const userKey = \"user_id\"","export default __webpack_public_path__ + \"static/media/surprise-face.f36133bf.svg\";","export default __webpack_public_path__ + \"static/media/logo.a02c08aa.png\";","import React, {useEffect, useState} from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useCookies } from \"react-cookie\";\nimport {annotationKey, skippedKey, userKey} from \"../../helpers/settings\";\nimport useLocalStorage from \"react-localstorage-hook\";\nimport logo from './logo.png';\n\nfunction Copyright({setShowId}) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Built with React and Material UI for \"}\n      <Link color=\"inherit\" href=\"https://pwr.edu.pl/en/\">\n        <b>WUST</b>\n      </Link>{\" \"}\n      <span onClick={() => setShowId(true)}>:)</span>\n      {\".\"}<br/><span style={{fontSize: 10}}>\n      {\"Icons made by \"}\n      <Link href=\"https://www.flaticon.com/authors/freepik\" color=\"inherit\" title=\"Freepik\">Freepik</Link>\n      {\" from \"}\n      <Link href=\"https://www.flaticon.com/\" color=\"inherit\" title=\"Flaticon\">www.flaticon.com</Link></span>\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: '90%',\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  logo: {\n    width: 50,\n    marginRight: theme.spacing(2),\n\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(2),\n    // padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      // marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(4),\n      // padding: theme.spacing(3),\n    },\n  },\n}));\n\nexport default function Layout({ children }) {\n  const classes = useStyles();\n  const [showId, setShowId] = useState(false);\n  const [cookies, setCookie] = useCookies([annotationKey, userKey, skippedKey]);\n  const [storage, setStorage] = useLocalStorage(annotationKey, []);\n  const [skipped, setSkipped] = useLocalStorage(skippedKey, []);\n\n  const annotations = cookies[annotationKey] || []\n  const skippedTweets = cookies[skippedKey] || []\n\n  useEffect(() => {\n    if(storage == null || (Array.isArray(storage) && storage.length === 0) || storage === '') {\n      setStorage(annotations);\n      setCookie(annotationKey, [])\n    }\n    if(skipped == null || (Array.isArray(skipped) && skipped.length === 0) || skipped === '') {\n      setSkipped(skippedTweets);\n      setCookie(skippedKey, [])\n    }\n  }, [])\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={classes.appBar}>\n        <Toolbar>\n          <img className={classes.logo} src={logo} />\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            POLEMIC - POLish EMotIon Classifier\n          </Typography>\n          <span style={{'flex': 1}} />\n        </Toolbar>\n      </AppBar>\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <React.Fragment>{children}</React.Fragment>\n        </Paper>\n        <Copyright setShowId={setShowId} />\n      </main>\n    </React.Fragment>\n  );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n\nimport \"./Tweet.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    backgroundColor: \"rgba(29, 161, 242, 0.1)\",\n    width: \"550px\",\n    minHeight: \"100px\",\n    position: \"relative\",\n  },\n  tweet: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  error: {\n    backgroundColor: \"#f44336\",\n    color: \"#fff\",\n    fontWeight: 500,\n  },\n  errorMessage: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  info: {\n    backgroundColor: \"#2196f336\",\n    color: \"#000\",\n    fontWeight: 500,\n  },\n  progress: {\n    position: \"absolute\",\n    left: \"45%\",\n    top: \"25px\",\n  },\n}));\n\nexport default function Tweet({ tweetContent = \"\", tweetId }) {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const onLoad = () => {\n    setLoading(false);\n  };\n\n  const onFail = () => {\n    setLoading(false);\n    setError(true);\n  };\n\n  if (error === true) {\n    return (\n      <SnackbarContent\n        className={classes.error}\n        message={\n          <React.Fragment>\n            <span className={classes.errorMessage}>\n              <Icon style={{ marginRight: \"10px\" }}>error_outline</Icon>\n              Ups... There is a problem with this tweet. Please check if you\n              have Adblock Disabled and if you have then just skip this tweet.\n            </span>\n          </React.Fragment>\n        }\n      />\n    );\n  }\n\n  return (\n    tweetId && (\n      <React.Fragment>\n        <Card className={classes.card}>\n          <CardContent className={\"tweet-content\"}>\n            {\n              <TwitterTweetEmbed\n                onLoad={onLoad}\n                tweetId={tweetId}\n                options={{ maxWidth: 800, cards: \"hidden\" }}\n              />\n            }\n          </CardContent>\n          {loading && (\n            <CircularProgress color=\"secondary\" className={classes.progress} />\n          )}\n        </Card>\n      </React.Fragment>\n    )\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  FirebaseDatabaseMutation,\n  FirebaseDatabaseNode,\n} from \"@react-firebase/database\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { useCookies } from \"react-cookie\";\nimport { nanoid } from \"nanoid\";\nimport Tweet from \"../Tweet/Tweet\";\nimport useLocalStorage from \"react-localstorage-hook\";\nimport {labels, annotationKey, skippedKey, userKey} from \"../../helpers/settings\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  buttonContainer: {\n    margin: \"auto\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n    fontSize: \"1rem\",\n  },\n  labelIcon: {\n    height: theme.spacing(6),\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst path = \"tweets/\";\nconst cookieAge = 60 * 60 * 24 * 365; //year\n\nexport default function Form() {\n  const classes = useStyles();\n  const [settingSkip, setSettingSkip] = useState(null);\n  const [selectedTweet, setSelectedTweet] = useState(null)\n  const [cookies, setCookies] = useCookies([ userKey ]);\n  const [annotations, setAnnotations] = useLocalStorage(annotationKey)\n  const [skipped, setSkipped] = useLocalStorage(skippedKey)\n\n  if (cookies[userKey] == null) {\n    setCookies(userKey, nanoid(), { maxAge: cookieAge });\n  }\n\n  useEffect(() => {\n    if (settingSkip != null) {\n      setSkipped([...skipped, settingSkip]);\n      setSettingSkip(null);\n      setSelectedTweet(null);\n    }\n  }, [settingSkip]);\n\n  const handleSkip = (tweet) => {\n    setSettingSkip(tweet.id);\n  };\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={3}>\n        {settingSkip == null && (\n          <React.Fragment>\n            <Grid item xs={12}>\n              {\n                selectedTweet && <Tweet tweetContent={selectedTweet.tweet} tweetId={\"\" + selectedTweet.id + \"\"} />\n              }\n            </Grid>\n\n            <React.Fragment>\n              {selectedTweet && (\n                <FirebaseDatabaseMutation\n                  type=\"update\"\n                  path={path + `${selectedTweet.pos}/`}\n                >\n                  {({ runMutation }) => {\n                    return (\n                      <Grid\n                        container\n                        alignContent=\"center\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        className={classes.buttonContainer}\n                      >\n                        {labels.map((label) => (\n                          <Button\n                            key={label.id}\n                            // variant=\"contained\"\n                            variant=\"outlined\"\n                            color=\"secondary\"\n                            className={classes.button}\n                            onClick={async () => {\n                              setAnnotations(\n                                [...annotations, selectedTweet.id]\n                              );\n                              const request = {\n                                id: selectedTweet.id,\n                                tweet: selectedTweet.tweet,\n                                annotations: [\n                                  ...(selectedTweet\n                                    ? selectedTweet.annotations || []\n                                    : []),\n                                  label.id,\n                                ],\n                                annotatedBy: [\n                                  ...(selectedTweet\n                                    ? selectedTweet.annotatedBy || []\n                                    : []),\n                                  cookies[userKey],\n                                ],\n                              }\n                              setSelectedTweet(null)\n                              const { key } = await runMutation(request);\n                            }}\n                          >\n                            <img\n                              className={classes.labelIcon}\n                              src={label.icon}\n                            />\n                            {label.label}\n                          </Button>\n                        ))}\n                      </Grid>\n                    );\n                  }}\n                </FirebaseDatabaseMutation>\n              )}\n              <div className={classes.buttons}>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => handleSkip(selectedTweet)}\n                  className={classes.button}\n                >\n                  {\"Skip :(\"}\n                </Button>\n              </div>\n            </React.Fragment>\n            <FirebaseDatabaseNode path={path} orderByKey annotations skipped>\n              {(d) => {\n                if (!d.value) {\n                  return null;\n                }\n                let selectedTweets = d.value.filter(\n                  (tweet) =>\n                    !annotations.includes(tweet.id) &&\n                    !skipped.includes(tweet.id)\n                );\n                selectedTweets = selectedTweets.filter(\n                  (tweet) =>\n                    tweet.annotations == null || tweet.annotations.length < 3\n                );\n                const selectedTweetId =\n                  selectedTweets[\n                    Math.floor(Math.random() * selectedTweets.length)\n                  ].id;\n                const tweetIndex = d.value.findIndex(\n                  (tweet) => tweet.id === selectedTweetId\n                );\n                if (cookies[userKey] && d.value != null && selectedTweet == null) {\n                  setSelectedTweet({ ...d.value[tweetIndex], pos: tweetIndex })\n                }\n                return (<div />);\n              }}\n            </FirebaseDatabaseNode>\n          </React.Fragment>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React, { useCallback, useMemo } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  zone: {\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: \"20px\",\n    fontSize: \"1.2rem\",\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: \"#eeeeee\",\n    borderStyle: \"dashed\",\n    backgroundColor: \"#fafafa\",\n    color: \"#bdbdbd\",\n    outline: \"none\",\n    transition: \"border .24s ease-in-out\",\n  },\n  activeStyle: {\n    borderColor: \"#2196f3\",\n  },\n  acceptStyle: {\n    borderColor: \"#00e676\",\n  },\n  rejectStyle: {\n    borderColor: \"#ff1744\",\n    color: \"#ff1744\",\n  },\n}));\n\nexport default function DropZone({onFileChange = () => {}}) {\n  const classes = useStyles();\n  const onDrop = useCallback((acceptedFiles) => {\n    // Do something with the files\n    const reader = new FileReader();\n\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    reader.onerror = () => console.log(\"file reading failed\");\n    reader.onload = () => {\n      // Parse CSV file\n      const result = JSON.parse(reader.result);\n      console.log(result)\n      if (Array.isArray(result) && result[0].id != null) {\n        onFileChange(result.filter((item, pos) => {\n          console.log(result.indexOf(item), pos)\n          return result.findIndex(el => el.id === item.id) === pos\n        }))\n      }\n    };\n\n    // read file contents\n    acceptedFiles.forEach((file) => reader.readAsText(file));\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ accept: \"application/json\", onDrop });\n\n  const style = `${classes.zone} ${isDragActive ? classes.activeStyle : \"\"} ${\n    isDragAccept ? classes.acceptStyle : \"\"\n  } ${isDragReject ? classes.rejectStyle : \"\"}`;\n\n  return (\n    <div className={style} {...getRootProps()}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        isDragAccept ? (\n          <p>Drop the files here ...</p>\n        ) : (\n          <p>\n            You cannot drop this type of file, we only accept{\" \"}\n            <strong>.json</strong> files\n          </p>\n        )\n      ) : (\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      )}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Tweet from \"../Tweet/Tweet\";\n\nconst useStyles = makeStyles((theme) => ({\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  buttonContainer: {\n    margin: \"auto\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n    fontSize: \"1rem\",\n  },\n  labelIcon: {\n    height: theme.spacing(6),\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    paddingLeft: theme.spacing(1),\n    paddingTop: theme.spacing(1),\n    textAlign: \"center\",\n  },\n  table: {\n    maxHeight: \"60vh\",\n  },\n  body: {\n    height: \"100%\",\n    overflowY: \"auto\",\n  },\n  tweetClass: {\n    padding: 0\n  }\n}));\n\nexport default function TweetTable({ tweets = [] }) {\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  return (\n    <React.Fragment>\n      <TableContainer className={classes.table}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Tweet</TableCell>\n              <TableCell align=\"right\">Emotion - Model 1</TableCell>\n              <TableCell align=\"right\">Emotion - Model 2</TableCell>\n              <TableCell align=\"right\">Emotion - Model 3</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tweets\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row) => (\n                <TableRow key={row.id}>\n                  <TableCell padding=\"none\" size=\"small\" className={classes.tweetClass}>\n                    <Tweet\n\n                      tweetContent={row.content}\n                      tweetId={\"\" + row.id.split(\"/\")[3] + \"\"}\n                    />\n                  </TableCell>\n                  <TableCell\n                    align=\"right\"\n                    style={{\n                      color: row.status === \"On Time\" ? \"green\" : \"red\",\n                    }}\n                  >\n                    Model's API not available\n                  </TableCell>\n                  <TableCell\n                    align=\"right\"\n                    style={{\n                      color: row.status === \"On Time\" ? \"green\" : \"red\",\n                    }}\n                  >\n                    Model's API not available\n                  </TableCell>\n                  <TableCell\n                    align=\"right\"\n                    style={{\n                      color: row.status === \"On Time\" ? \"green\" : \"red\",\n                    }}\n                  >\n                    Model's API not available\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {tweets.length !== 0 && (\n        <TablePagination\n          rowsPerPageOptions={[10, 25, 100]}\n          component=\"div\"\n          count={tweets.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      )}\n      {tweets.length === 0 && (\n        <Typography\n          component=\"h2\"\n          variant=\"h6\"\n          color=\"textSecondary\"\n          gutterBottom\n          className={classes.title}\n        >\n          Please upload file with tweets\n        </Typography>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useState } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport {\n  createMuiTheme,\n  makeStyles,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport secondary from \"@material-ui/core/colors/indigo\";\nimport { CookiesProvider } from \"react-cookie\";\n\nimport Layout from \"../Layout/Layout\";\nimport Form from \"../Form/Form\";\nimport Placeholder from \"../Placeholder/Placeholder\";\nimport DropZone from \"../DropZone/DropZone\";\nimport Table from \"../Table/Table\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#852508\",\n    },\n    secondary: secondary,\n  },\n});\n\nfunction App() {\n  const [tweets, setTweets] = useState([]);\n\n  const onTweetsChange = (newTweets = []) => {\n    setTweets(newTweets);\n  };\n\n  return (\n    <CookiesProvider>\n      <ThemeProvider theme={theme}>\n        <Layout>\n          <DropZone onFileChange={onTweetsChange} />\n          <Table tweets={tweets} />\n        </Layout>\n      </ThemeProvider>\n    </CookiesProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}